import axios from "axios";
import { PrismaClient } from "@prisma/client";
import { ApiKeyWithRemaining, keyManager } from "./keyManager";
import { logger } from "../utils/logger";

export const sauceNaoService = {
  async search(prisma: PrismaClient, imageUrl: string): Promise<string> {
    const maxRetries = 3;
    let attempts = 0;

    while (attempts < maxRetries) {
      attempts++;
      let sauceKey: ApiKeyWithRemaining | null = null;
      let scraperKey: ApiKeyWithRemaining | null = null;
      try {
        logger.info(`–ü–æ–ø—ã—Ç–∫–∞ ${attempts} –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`);
        sauceKey = await keyManager.getAvailableKey(prisma, "SAUCENAO");
        if (!sauceKey) {
          logger.warn("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π SauceNAO");
          return "error:üö´ –õ–∏–º–∏—Ç –∫–ª—é—á–µ–π SauceNAO –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";
        }

        scraperKey = await keyManager.getAvailableKey(prisma, "SCRAPER");
        if (!scraperKey) {
          logger.warn("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π ScraperAPI");
          return "error:üö´ –õ–∏–º–∏—Ç –∫–ª—é—á–µ–π ScraperAPI –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";
        }

        const sauceNAOUrl = `https://saucenao.com/search.php?db=999&output_type=2&numres=1&url=${encodeURIComponent(imageUrl)}&api_key=${sauceKey.apiKey}`;
        logger.info(`–ü–æ–ª–Ω—ã–π URL SauceNAO: ${sauceNAOUrl}`);
        const response = await axios.get(
          `http://api.scraperapi.com?api_key=${scraperKey.apiKey}&url=${encodeURIComponent(sauceNAOUrl)}`,
          { timeout: 10000 },
        );

        const data = response.data;
        if (typeof data === "string" && data.includes("<!DOCTYPE html")) {
          logger.error(
            `HTML-–æ—Ç–≤–µ—Ç –æ—Ç SauceNAO (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}), –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á: ${data.slice(0, 200)}`,
          );
          await prisma.$transaction(async (tx) => {
            await prisma.apiKey.update({
              where: { id: sauceKey!.id },
              data: { isActive: false, longRemaining: 0 },
            });
          });
          continue;
        }

        const longRemaining =
          data.header?.long_remaining ?? sauceKey.longRemaining;
        await prisma.$transaction(async (tx) => {
          await keyManager.updateRemaining(
            tx,
            sauceKey!.id,
            "SAUCENAO",
            longRemaining,
          );
          await keyManager.updateRemaining(tx, scraperKey!.id, "SCRAPER");
        });

        if (data.header?.status !== 0) {
          const message = data.header?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
          logger.error(
            `–û—à–∏–±–∫–∞ API SauceNAO (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}): ${message}, –æ—Å—Ç–∞—Ç–æ–∫: ${longRemaining}`,
          );
          await prisma.$transaction(async (tx) => {
            await prisma.apiKey.update({
              where: { id: sauceKey!.id },
              data: { isActive: false, longRemaining: 0 },
            });
          });
          continue;
        }

        if (data.results?.length > 0) {
          const result = data.results[0];
          const header = result.header || {};
          const dataResult = result.data || {};

          const title = dataResult.title || dataResult.source || null;

          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          if (!title) {
            logger.info(`–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç SauceNAO (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);
            return `üö´ <b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏</b>\n<i>–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</i>\n\n‚è≤Ô∏è <b>–û—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∞:</b> ${longRemaining}/100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å`;
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
          const output: string[] = [`üé® <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>`];
          if (header.similarity) {
            output.push(`üîç <b>–°—Ö–æ–¥—Å—Ç–≤–æ:</b> <i>${header.similarity}%</i>`);
          }
          output.push(`üìñ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>${title}</i>`);
          if (dataResult.ext_urls?.length > 0) {
            const escapedUrls = dataResult.ext_urls
              .map((url: string) => url.replace(/&/g, "&amp;"))
              .join(", ");
            output.push(`üîó <b>–°—Å—ã–ª–∫–∏:</b> ${escapedUrls}`);
          }
          const author = dataResult.author || dataResult.member_name;
          if (author) {
            output.push(`‚úçÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> <i>${author}</i>`);
          }
          if (dataResult.part) {
            output.push(`üì∫ <b>–°–µ–∑–æ–Ω/–≠–ø–∏–∑–æ–¥:</b> <i>${dataResult.part}</i>`);
          }
          if (dataResult.year) {
            output.push(`üìÖ <b>–ì–æ–¥:</b> <i>${dataResult.year}</i>`);
          }
          if (dataResult.est_time) {
            output.push(`‚è∞ <b>–¢–∞–π–º–∏–Ω–≥:</b> <i>${dataResult.est_time}</i>`);
          }
          output.push(
            `\n‚îÄ\n‚è≤Ô∏è <b>–û—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∞:</b> ${longRemaining}/100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å`,
          );

          logger.info(`–£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ SauceNAO (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);
          return output.join("\n");
        }

        logger.info(`–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç SauceNAO (–ø–æ–ø—ã—Ç–∫–∞ ${attempts})`);
        return `üö´ <b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏</b>\n<i>–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!</i>\n\n‚è≤Ô∏è <b>–û—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∞:</b> ${longRemaining}/100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å`;
      } catch (error: any) {
        logger.error(
          `–û—à–∏–±–∫–∞ –≤ sauceNaoService (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}): ${error.message}`,
          error.stack,
        );

        if (error.response?.status && sauceKey && scraperKey) {
          const status = error.response.status;
          await prisma.$transaction(async (tx) => {
            if (status === 429) {
              // Rate limit
              await tx.apiKey.update({
                where: { id: scraperKey!.id },
                data: { isActive: false },
              });
              logger.warn(
                `Scraper –∫–ª—é—á ${scraperKey!.id} –æ—Ç–∫–ª—é—á—ë–Ω –Ω–∞ 60 —Å–µ–∫ (429)`,
              );
              setTimeout(async () => {
                try {
                  await prisma.apiKey.update({
                    where: { id: scraperKey!.id },
                    data: { isActive: true },
                  });
                  logger.info(`Scraper –∫–ª—é—á ${scraperKey!.id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
                } catch (err: any) {
                  logger.error(
                    `–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Scraper –∫–ª—é—á–∞ ${scraperKey!.id}: ${err.message}`,
                  );
                }
              }, 60000); // 60 —Å–µ–∫
            } else if (status === 403) {
              // Quota exceeded
              await tx.apiKey.update({
                where: { id: scraperKey!.id },
                data: { isActive: false },
              });
              logger.warn(
                `Scraper –∫–ª—é—á ${scraperKey!.id} –æ—Ç–∫–ª—é—á—ë–Ω (403 quota)`,
              );
              // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ cron
            } else {
              // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏: Retry –∏–ª–∏ –∏–≥–Ω–æ—Ä
              logger.error(`–û—à–∏–±–∫–∞ Scraper: ${status}`);
            }
          });
        }

        if (sauceKey) {
          logger.warn(
            `–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ SAUCENAO:${sauceKey.id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error.message}`,
          );
          await prisma.$transaction(async (tx) => {
            await prisma.apiKey.update({
              where: { id: sauceKey!.id },
              data: { isActive: false, longRemaining: 0 },
            });
          });
        }
      }
    }

    logger.error(
      `–í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –¥–ª—è ${imageUrl}`,
    );
    return "error:üö´ –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.";
  },
};
