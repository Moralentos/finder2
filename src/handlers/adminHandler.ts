import { Context } from "grammy";
import { PrismaClient } from "@prisma/client";
import { logger } from "../utils/logger";
import { differenceInMonths } from "date-fns";
import { Config } from "../config";

interface ApiKey {
  id: string;
  type: "SAUCENAO" | "SCRAPER";
  apiKey: string;
  totalUses: number;
  dailyUses: number;
  initialLimit: number;
  dailyLimit: number;
  isNew: boolean;
  createdAt: Date;
  isActive: boolean;
}

export const adminHandler =
  (command: string, prisma: PrismaClient) => async (ctx: Context) => {
    const userId = ctx.from?.id;
    if (!userId || userId !== Config.adminId) {
      logger.warn(`–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /${command}: userId ${userId}`);
      return ctx.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.");
    }

    if (command === "stats") {
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const todayUses = await prisma.usage.count({
        where: { date: { gte: today } },
      });
      const newUsers = await prisma.user.count({
        where: { createdAt: { gte: today } },
      });

      const saucenaoKeys = (await prisma.apiKey.findMany({
        where: { type: "SAUCENAO" },
      })) as ApiKey[];
      const saucenaoTotalLimit = saucenaoKeys.reduce(
        (sum, key) => sum + key.initialLimit,
        0,
      );
      const saucenaoTotalUses = saucenaoKeys.reduce(
        (sum, key) => sum + key.totalUses,
        0,
      );
      const saucenaoRemaining = saucenaoTotalLimit - saucenaoTotalUses;

      const scraperKeys = (await prisma.apiKey.findMany({
        where: { type: "SCRAPER" },
      })) as ApiKey[];
      const scraperTotalLimit = scraperKeys.reduce(
        (sum, key) =>
          sum +
          (key.isNew && differenceInMonths(new Date(), key.createdAt) < 1
            ? 5000
            : 1000),
        0,
      );
      const scraperTotalUses = scraperKeys.reduce(
        (sum, key) => sum + key.totalUses,
        0,
      );
      const scraperRemaining = scraperTotalLimit - scraperTotalUses;

      const stats =
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
        `–°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${todayUses}\n` +
        `–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: ${newUsers}\n` +
        `–û—Å—Ç–∞—Ç–æ–∫ SauceNAO: ${saucenaoRemaining}/${saucenaoTotalLimit}\n` +
        `–û—Å—Ç–∞—Ç–æ–∫ ScraperAPI: ${scraperRemaining}/${scraperTotalLimit}`;

      return ctx.reply(stats);
    }

    if (command === "admin") {
      if (!ctx.match || typeof ctx.match !== "string") {
        logger.warn("ctx.match is undefined or not a string");
        return ctx.reply(
          "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /admin add_key SAUCENAO key 100 false",
        );
      }

      const args = ctx.match.trim().split(/\s+/); // –ò—Å–ø–æ–ª—å–∑—É–µ–º RegExp –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
      if (args[0] === "add_key") {
        if (args.length < 5) {
          return ctx.reply(
            "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /admin add_key SAUCENAO key 100 false",
          );
        }
        const [type, key, initialLimit, isNew] = args.slice(1);
        if (!["SAUCENAO", "SCRAPER"].includes(type)) {
          return ctx.reply(
            "–û—à–∏–±–∫–∞: —Ç–∏–ø –∫–ª—é—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å SAUCENAO –∏–ª–∏ SCRAPER",
          );
        }
        const initialLimitNum = parseInt(initialLimit);
        if (isNaN(initialLimitNum)) {
          return ctx.reply("–û—à–∏–±–∫–∞: initialLimit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
        }
        await prisma.apiKey.create({
          data: {
            type: type as "SAUCENAO" | "SCRAPER",
            apiKey: key,
            initialLimit: initialLimitNum,
            dailyLimit: type === "SAUCENAO" ? 100 : 1000,
            isNew: isNew === "true",
          },
        });
        return ctx.reply(`–ö–ª—é—á ${type} –¥–æ–±–∞–≤–ª–µ–Ω.`);
      }
      if (args[0] === "set_status") {
        if (args.length < 3) {
          return ctx.reply(
            "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /admin set_status 123456789 PREMIUM",
          );
        }
        const [telegramId, status] = args.slice(1);
        const telegramIdNum = parseInt(telegramId);
        if (isNaN(telegramIdNum)) {
          return ctx.reply("–û—à–∏–±–∫–∞: telegramId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º");
        }
        if (!["ORDINARY", "PREMIUM", "ADMIN"].includes(status)) {
          return ctx.reply(
            "–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ORDINARY, PREMIUM –∏–ª–∏ ADMIN",
          );
        }
        await prisma.user.update({
          where: { telegramId: telegramIdNum },
          data: { status: status as "ORDINARY" | "PREMIUM" | "ADMIN" },
        });
        return ctx.reply(
          `–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${status}.`,
        );
      }
      return ctx.reply(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: add_key –∏–ª–∏ set_status",
      );
    }
  };
